{"version":3,"sources":["EventField.js","EventField.ts"],"names":["_createClass","defineProperties","target","props","key","prop","configurable","value","writable","Object","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","EventFieldListenerGroup","this","EventFieldListenerGroup.constructor","EventFieldListenerGroup.on","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","EventFieldListenerGroup.unbind","err","_iterator","EventField","EventField.constructor","_this","EventField.on","EventField.un","EventField.emit"],"mappings":"AAAA,YAEA,IAAIA,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,KAAOD,GAAO,CAAE,GAAIE,GAAOF,EAAMC,EAAMC,GAAKC,cAAe,EAAUD,EAAKE,QAAOF,EAAKG,UAAW,GAAQC,OAAOR,iBAAiBC,EAAQC,GAAU,MAAO,UAAUO,EAAaC,EAAYC,GAAiJ,MAA9HD,IAAYV,EAAiBS,EAAYG,UAAWF,GAAiBC,GAAaX,EAAiBS,EAAaE,GAAqBF,MAEvaI,gBAAkB,SAAUC,EAAUL,GAAe,KAAMK,YAAoBL,IAAgB,KAAM,IAAIM,WAAU,sCCCvHC,wBAAA,WAIEA,QAJFA,GAIsBA,GDDdH,gBAAgBI,KCHxBD,GAIsBE,KAAAA,MAAAA,EAFZA,KAAAA,WDsDN,MA/CAnB,cCTJiB,GASEA,IDMUV,MCNRU,SAACA,GACDG,GAAIA,GAASA,KAAKA,MAAMA,GAAGA,EAC3BA,MAAKA,QAAQA,KAAKA,KAMpBH,QDQUV,MCRJU,QAAAA,KDSQ,GAAII,IAA4B,EAC5BC,GAAoB,EACpBC,EAAiBC,MAErB,KCZZC,IAAAA,GAA+BA,GAA/BA,EAAmBA,KAAKA,QAAOA,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EAAAA,CDcX,GCdXA,GAAMA,EAAAA,KACbA,MDiBY,MAAOC,GACLJ,GAAoB,EACpBC,EAAiBG,EACnB,QACE,KACSL,GAA6BM,EAAU,WACxCA,EAAU,YAEhB,QACE,GAAIL,EACA,KAAMC,ICzB9BE,KAAKA,eArBTR,KA0BAW,WAAA,WAAAA,QAAAA,KDmCQd,gBAAgBI,KCnCxBU,GAEUC,KAAAA,aDmGN,MA7DA7B,cCxCJ4B,GAOEA,IDuCUrB,MCvCRqB,SAACA,GDwCW,GAAIE,GAAQZ,ICtCxBa,OADAA,MAAKA,UAAUA,KAAKA,GACbA,WD0CS,MC1CHA,GAAKA,GAAGA,MAMvBH,ID6CUrB,MC7CRqB,SAACA,GACDI,GAAIA,GAAQA,KAAKA,UAAUA,QAAQA,EACrBA,MAAVA,GACFA,KAAKA,UAAUA,OAAOA,EAAOA,KAOjCJ,MD+CUrB,MC/CNqB,SAACA,GDgDS,GAAIP,IAA4B,EAC5BC,GAAoB,EACpBC,EAAiBC,MAErB,KCnDZS,IAAAA,GAAmCA,GAAnCA,EAAqBA,KAAKA,UAASA,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EAAAA,CDqDf,GCrDXA,GAAQA,EAAAA,KACfA,GAASA,IDwDG,MAAOP,GACLJ,GAAoB,EACpBC,EAAiBG,EACnB,QACE,KACSL,GAA6BM,EAAU,WACxCA,EAAU,YAEhB,QACE,GAAIL,EACA,KAAMC,SC7FlCK","file":"EventField.js","sourcesContent":["\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\nvar EventFieldListenerGroup = (function () {\n    function EventFieldListenerGroup(field) {\n        _classCallCheck(this, EventFieldListenerGroup);\n\n        this.field = field;\n        this.unbinds = [];\n    }\n\n    _createClass(EventFieldListenerGroup, {\n        on: {\n            /**\n             * Register a listener in the group\n             */\n\n            value: function on(listener) {\n                var unbind = this.field.on(listener);\n                this.unbinds.push(unbind);\n            }\n        },\n        unbind: {\n            /**\n             * Unregister all listeners in the group\n             */\n\n            value: function unbind() {\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = this.unbinds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var unbind = _step.value;\n\n                        unbind();\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n                            _iterator[\"return\"]();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n\n                this.unbinds = [];\n            }\n        }\n    });\n\n    return EventFieldListenerGroup;\n})();\n\nvar EventField = (function () {\n    function EventField() {\n        _classCallCheck(this, EventField);\n\n        this.listeners = [];\n    }\n\n    _createClass(EventField, {\n        on: {\n            /**\n             * Register a listener\n             */\n\n            value: function on(listener) {\n                var _this = this;\n\n                this.listeners.push(listener);\n                return function () {\n                    return _this.un(listener);\n                };\n            }\n        },\n        un: {\n            /**\n             * Unregister a listener\n             */\n\n            value: function un(listener) {\n                var index = this.listeners.indexOf(listener);\n                if (index !== -1) {\n                    this.listeners.splice(index, 1);\n                }\n            }\n        },\n        emit: {\n            /**\n             * Invoke the registered listeners with the provided payload\n             */\n\n            value: function emit(payload) {\n                var _iteratorNormalCompletion = true;\n                var _didIteratorError = false;\n                var _iteratorError = undefined;\n\n                try {\n                    for (var _iterator = this.listeners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                        var listener = _step.value;\n\n                        listener(payload);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator[\"return\"]) {\n                            _iterator[\"return\"]();\n                        }\n                    } finally {\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    return EventField;\n})();","\ninterface EventFieldListener<PayloadT> {\n  (payload: PayloadT): void;\n}\n\nclass EventFieldListenerGroup<PayloadT> {\n\n  private unbinds: Function[] = [];\n\n  constructor(private field: EventField<PayloadT>) {}\n\n  /**\n   * Register a listener in the group\n   */\n  on(listener: EventFieldListener<PayloadT>): void {\n    let unbind = this.field.on(listener);\n    this.unbinds.push(unbind);\n  }\n\n  /**\n   * Unregister all listeners in the group\n   */\n  unbind(): void {\n    for (let unbind of this.unbinds) {\n      unbind();\n    }\n    this.unbinds = [];\n  }\n  \n}\n\nclass EventField<PayloadT> {\n\n  private listeners: EventFieldListener<PayloadT>[] = [];\n\n  /**\n   * Register a listener\n   */\n  on(listener: EventFieldListener<PayloadT>): Function {\n    this.listeners.push(listener);\n    return () => this.un(listener);\n  }\n\n  /**\n   * Unregister a listener\n   */\n  un(listener: EventFieldListener<PayloadT>): void {\n    let index = this.listeners.indexOf(listener);\n    if (index !== -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Invoke the registered listeners with the provided payload\n   */\n  emit(payload: PayloadT): void {\n    for (let listener of this.listeners) {\n      listener(payload);\n    }\n  }\n}\n"],"sourceRoot":"/source/"}