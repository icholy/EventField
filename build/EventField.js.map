{"version":3,"sources":["EventField.ts"],"names":["EventFieldListenerGroup","EventFieldListenerGroup.constructor","EventFieldListenerGroup.on","EventFieldListenerGroup.unbind","EventField","EventField.constructor","EventField.on","EventField.un","EventField.emit","EventField.group"],"mappings":"AAKA,GAAAA,yBAAA,WAAAA,QAAAA,KAEUC,KAAAA,WAoBVD,MAfEA,GAAAA,UAAAA,GAAAA,SAAaA,EAA6BA,GACxCE,GAAIA,GAASA,EAAMA,GAAGA,EACtBA,MAAKA,QAAQA,KAAKA,IAMpBF,EAAAA,UAAAA,OAAAA,WACEG,IAAmBA,GAAAA,GAAAA,EAAAA,EAAAA,KAAKA,QAAnBA,EAAAA,EAAAA,OAAAA,IAA2BA,CAA3BA,GAAIA,GAAMA,EAAAA,EACbA,KAEFA,KAAKA,YAGTH,KAEAI,WAAA,WAAAA,QAAAA,KAEUC,KAAAA,aAmCVD,MA9BEA,GAAAA,UAAAA,GAAAA,SAAGA,GAAHE,GAAAA,GAAAA,IAEEA,OADAA,MAAKA,UAAUA,KAAKA,GACbA,WAAMA,MAAAA,GAAKA,GAAGA,KAMvBF,EAAAA,UAAAA,GAAAA,SAAGA,GACDG,GAAIA,GAAQA,KAAKA,UAAUA,QAAQA,EACrBA,MAAVA,GACFA,KAAKA,UAAUA,OAAOA,EAAOA,IAOjCH,EAAAA,UAAAA,KAAAA,SAAKA,GACHI,IAAqBA,GAAAA,GAAAA,EAAAA,EAAAA,KAAKA,UAArBA,EAAAA,EAAAA,OAAAA,IAA+BA,CAA/BA,GAAIA,GAAQA,EAAAA,EACfA,GAASA,KAONJ,EAAAA,MAAPA,WACEK,MAAOA,IAAIA,0BAEfL","file":"EventField.js","sourcesContent":["\ninterface EventFieldListener<PayloadT> {\n  (payload: PayloadT): void;\n}\n\nclass EventFieldListenerGroup {\n\n  private unbinds: Function[] = [];\n\n  /**\n   * Register a listener in the group\n   */\n  on<PayloadT>(field: EventField<PayloadT>, listener: EventFieldListener<PayloadT>): void {\n    let unbind = field.on(listener);\n    this.unbinds.push(unbind);\n  }\n\n  /**\n   * Unregister all listeners in the group\n   */\n  unbind(): void {\n    for (let unbind of this.unbinds) {\n      unbind();\n    }\n    this.unbinds = [];\n  }\n  \n}\n\nclass EventField<PayloadT> {\n\n  private listeners: EventFieldListener<PayloadT>[] = [];\n\n  /**\n   * Register a listener\n   */\n  on(listener: EventFieldListener<PayloadT>): Function {\n    this.listeners.push(listener);\n    return () => this.un(listener);\n  }\n\n  /**\n   * Unregister a listener\n   */\n  un(listener: EventFieldListener<PayloadT>): void {\n    let index = this.listeners.indexOf(listener);\n    if (index !== -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Invoke the registered listeners with the provided payload\n   */\n  emit(payload: PayloadT): void {\n    for (let listener of this.listeners) {\n      listener(payload);\n    }\n  }\n\n  /**\n   * Helper method for creating a group of listeners\n   */\n  static group(): EventFieldListenerGroup {\n    return new EventFieldListenerGroup();\n  }\n}\n"],"sourceRoot":"/source/"}